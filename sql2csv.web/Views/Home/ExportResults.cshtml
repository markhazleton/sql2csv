@model List<Sql2Csv.Web.Models.ExportResultViewModel>
@{
    ViewData["Title"] = "Export Results";
}

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-secondary-900">Export Results</h1>
                <p class="text-secondary-600 mt-2">
                    @Model.Count tables exported • @Model.Where(r => r.IsSuccess).Sum(r => r.RowCount) total rows
                </p>
            </div>
            <div class="flex space-x-3">
                <a asp-action="Analyze" class="btn-secondary">
                    <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    Back to Analysis
                </a>
                <button onclick="downloadAllCsvFiles()" class="btn-primary">
                    <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                        stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Download All CSV Files
                </button>
            </div>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid sm:grid-cols-3 gap-6 mb-8">
        <div class="bg-green-50 border border-green-200 rounded-xl p-6">
            <div class="flex items-center">
                <div class="bg-green-100 rounded-lg p-3">
                    <svg class="w-6 h-6 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-green-600">Successful</p>
                    <p class="text-2xl font-bold text-green-900">@Model.Count(r => r.IsSuccess)</p>
                </div>
            </div>
        </div>

        @if (Model.Any(r => !r.IsSuccess))
        {
            <div class="bg-red-50 border border-red-200 rounded-xl p-6">
                <div class="flex items-center">
                    <div class="bg-red-100 rounded-lg p-3">
                        <svg class="w-6 h-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                            stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-red-600">Failed</p>
                        <p class="text-2xl font-bold text-red-900">@Model.Count(r => !r.IsSuccess)</p>
                    </div>
                </div>
            </div>
        }

        <div class="bg-blue-50 border border-blue-200 rounded-xl p-6">
            <div class="flex items-center">
                <div class="bg-blue-100 rounded-lg p-3">
                    <svg class="w-6 h-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-blue-600">Total Rows</p>
                    <p class="text-2xl font-bold text-blue-900">@Model.Where(r => r.IsSuccess).Sum(r =>
                                                r.RowCount).ToString("N0")</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Export Results -->
    <div class="space-y-6">
        @foreach (var result in Model)
        {
            <div class="card">
                <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center space-x-3">
                        @if (result.IsSuccess)
                        {
                            <div class="bg-green-100 rounded-lg p-2">
                                <svg class="w-5 h-5 text-green-600" xmlns="http://www.w3.org/2000/svg" fill="none"
                                    viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                        }
                        else
                        {
                            <div class="bg-red-100 rounded-lg p-2">
                                <svg class="w-5 h-5 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none"
                                    viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </div>
                        }
                        <div>
                            <h3 class="text-lg font-semibold text-secondary-900">@result.TableName</h3>
                            @if (result.IsSuccess)
                            {
                                <p class="text-sm text-secondary-600">
                                    @result.RowCount.ToString("N0") rows •
                                    Exported in @result.Duration.TotalMilliseconds.ToString("F0")ms
                                </p>
                            }
                            else
                            {
                                <p class="text-sm text-red-600">Export failed</p>
                            }
                        </div>
                    </div>

                    @if (result.IsSuccess)
                    {
                        <div class="flex space-x-2">
                            <button onclick="downloadCsvFile('@result.FileName', @Html.Raw(Json.Serialize(result.FileContent)))"
                                class="btn-outline text-sm">
                                <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                Download
                            </button>
                            <button onclick="copyToClipboard(@Html.Raw(Json.Serialize(result.FileContent)))"
                                class="btn-outline text-sm">
                                <svg class="w-4 h-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                Copy
                            </button>
                        </div>
                    }
                </div>

                @if (result.IsSuccess)
                {
                    <div class="space-y-4" x-data="{ showPreview: false }">
                        <div class="flex items-center justify-between">
                            <h4 class="font-medium text-secondary-900">CSV Content</h4>
                            <button @@click="showPreview = !showPreview" class="btn-outline text-sm">
                                <span x-text="showPreview ? 'Hide Preview' : 'Show Preview'"></span>
                            </button>
                        </div>
                        <div x-show="showPreview" x-transition class="bg-secondary-50 rounded-lg p-4">
                            <pre
                                class="text-xs text-secondary-800 whitespace-pre-wrap font-mono max-h-64 overflow-y-auto">@result.FileContent.Substring(0, Math.Min(result.FileContent.Length, 2000))@(result.FileContent.Length > 2000 ? "..." : "")</pre>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(result.ErrorMessage))
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                        <p class="text-sm text-red-800">
                            <span class="font-medium">Error:</span> @result.ErrorMessage
                        </p>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function downloadCsvFile(filename, content)
        {
            downloadFile(content, filename, 'text/csv');
        }

        function downloadAllCsvFiles()
        {
                @foreach (var result in Model.Where(r => r.IsSuccess))
                {
                    <text>
                        downloadFile(@Html.Raw(Json.Serialize(result.FileContent)), '@result.FileName', 'text/csv');
                    </text>
            }
            }
    </script>
}
